Fuzix for 6809 Multicomp

Copyright 2016, Neal Andrew Crook, under GPL2.
Derived from Coco3 port which is
Copyright 2015, Brett M. Gordon, under GPL2.

This port is for running FUZIX on an FPGA computer called "Multicomp"
which was originally designed by Grant Searle. This incarnation of
Multicomp uses a 6809 processor, thus the platform name "multicomp09".

In its current form, somwhat evolved from Grant's design, multicomp09
provides the following:

- 6809 running at about 12MHz
- boot from ROM but ROM can then be switched out of the memory map
- ROM is CamelForth, with hooks to boot multiple other OS from SD:
  - Microsoft BASIC, FLEX, CUBIX, Buggy, NitrOS9, FUZIX
- RAM from 0 to 0xffff except for:
  - I/O space from 0xffd0-0xffdf
- 50Hz Timer interrupt
- Hardware single-step
- SD controller in hw state-machines
- Virtual 6850-like UART interfacing to an 80x25 colour ANSI terminal
  on a VGA display with PS/2 keyboard input
- Upto 2 6850-like serial UARTs with RS232 or virtual-RS232/USB interfaces
- coco-style memory mapping unit (2 contexts, 8K banks)
  - upto 1MByte physical RAM
- RTC through DS1302 bit-banged on GPIO port.

More details, including PCBs, software, source code:

http://searle.hostei.com/grant/Multicomp/index.html
https://github.com/nealcrook/multicomp6809 (and visit the WIKI there)
https://www.retrobrewcomputers.org/doku.php?id=boards:sbc:multicomp:cycloneii-c:start

This port is based heavily on the coco3 port which itself is based on
the platform-6809test and the two dragon ports by Tormod Volden.
No disk swapping is supported

*************************
REQUIREMENTS
*************************

A 128KByte or more multicomp09 board

Limited debug can be performed using exec09

and for building:

lwtools from William Astle: http://lwtools.projects.l-w.ca/
gcc6809: http://toolshed.sourceforge.net/gcc/


*************************
BOOTING
*************************

The build process (see BUILDING below) produces the following files:

fuzix.bin    -- the kernel, in DECB object file format
fuzixfs.dsk  -- an image of the root file system in fuzix disk format.
boot.bin     -- a bootstrap loader, in raw binary format.

The kernel must be loaded and started through a platform-dependent process. When
the kernel starts up it locates and mounts the root disk. The root disk contains
the /dev tree as well as essential binaries like init.

The DECB object file format can contain multiple sections, with different load
addresses, and a start address. Therefore, it can represent a sparse binary.

The multicomp SDcard holds multiple OS/disk images so the FUZIX stuff cannot
start at block 0. As well as a boot loader, need to allocate space for
the kernel, a swap file, a root disk and a second disk.

The boot loader starts at block 0x3.0000 on the SDcard
The kernel      starts at block 0x3.0400 on the SDcard
The rootfs      starts at block 0x3.1000 on the SDcard
Space is assigned for a 1MByte swap file at 0x3.0800
Space is assigned for a 2nd file system  at 0x4.1000

The location of these files is hard-wired as follows:

- All of them are hard-wired in the script that creates the SDcard image.
- The location of the boot-loader is hard-wired in the CamelForth word FUZIX.
- The location of the boot-loaded is hard-wired in mbr.c through the definition
  CONFIG_MBR_OFFSET in config.h for this platform.
- The location of the kernel is hard-wired in the code section of the boot loader.
- The location of the rootfs and additional file system is hard-wired in the
  partition table that forms part of the boot-loader.

The boot-loader code is in platform-multicomp09/boot/boot.s

It is designed to load and start at address 0xd000. It is exactly 512 bytes in
size and it is laid out like a standard hard drive master boot record (MBR)
except that:

- The code region contains 6809 code rather than 8086 code.
- The 4 entries in the partition table specify the locations of the partitions
  relative to the location of the MBR itself.

The boot-loader can be loaded and started from CamelForth like this:

HEX MMUMAP 3 SDLBA2 0 D000 SDRD D000 PIVOT

(the latest version of CamelForth has a word FUZIX defined to do this)

When control passes to the boot-loader, it locates the kernel, parses the DECB
format to load the kernel to RAM and pass control to it at its start address
(which is encoded into the DECB file).



*************************
KEYBOARD
*************************

The default I/O is the VGA/PS2 keyboard, *or* the RS232 serial port, depending
upon the setting of the VDUFFD0 jumper.


*************************
DEVICES (so far)
*************************

node       major   minor     description
/dev/tty1  2       1   	     console
/dev/tty2  2       2         RS232 port
/dev/tty3  2       3         USB virtual RS232 port
/dev/tty4  2       4         Drivewire Virtual Window #0  (coming soon..)
/dev/dw?   8       0-256     Drivewire Block Drives       (coming soon..)


**************************
BUILDING
**************************

# 1. Build the kernel:
make -C Kernel TARGET=multicomp09

# 2. Build the bootstrap loader
make -C Kernel/platform-multicomp09 boot.bin

# 2. Build the libraries
make -C Library tools/syscall_6809
make -C Library/libs -f Makefile.6809 TARGET=multicomp09

# 3. Build the utils
make -C Applications/util -f Makefile.6809 TARGET=multicomp09
make -C Applications/V7/cmd/sh -f Makefile.6809 TARGET=multicomp09
make -C Applications/levee -f Makefile.6809 TARGET=multicomp09
make -C Applications/cave -f Makefile.6809 TARGET=multicomp09
make -C Applications/dw -f Makefile.6809 TARGET=multicomp09
make -C Applications/cpp  TARGET=multicomp09
make -C Applications/as09 TARGET=multicomp09
make -C Applications/ld09 TARGET=multicomp09
make -C Applications/V7/games -f Makefile.6809 TARGET=multicomp09

# 4. Build disk tools
make -C Standalone

# 5. Build boot disk image
cd Standalone/filesystem-src && ./build-filesystem -X fuzixfs.dsk 256 65535

# 6. Add extras
cd Standalone/filesystem-src && ./add-extras -X fuzixfs.dsk


**************************
CREATING THE SD CARD
**************************

If using other Multicomp software, use the normal create_sd_image script. The
FUZIX-related lines are as follows:

dd if=fuzix_boot.bin of=multicomp09_sd.img obs=512K seek=192
dd if=fuzix.bin      of=multicomp09_sd.img obs=512K seek=193
dd if=fuzixfs.dsk of=multicomp09_sd.img obs=1M seek=98

finally, use dd to transfer multicomp09_sd.img to an SD card.


*************************
DONE
*************************

* Fix the underlying Banking layout to better handle UDATA


*************************
TO DO
*************************

[NAC HACK 2016Apr23] my TO DO

* Swapping to disk has not been implemented yet
* Drivewire driver (should be simple based on Brett's work)
* RTC driver
* currently assume 64, 8K pages - like coco3. Want actually to do a memory size and cope with 512K
  or 1MByte
* unify things that need not be different from coco3
* BUG fix exec09 core dump on register print
* BUG separate memcpy memset out of videoll.s -- for all 6809 platforms.
* BUG should have CONFIG_SDC in coco config.def otherwise devsdc_init doesn't get called in devices.c
* BUG other platforms have mixture of CONFIG_IDE and DEVICE_IDE and CONFIG_SDC and DEVICE_SD
* BUG coco3 devices.c should #include devide.h devsd.h
* BUG fix problem of missing include file that I ended up copying
* BUG devsd.h has devsd_init but devsdc.c had devsdc_init, so did devices.c The other routine names
* are not uniform either..
* BUG loader does not spot overlapped section or section that overflows address space
* BUG Library/libs/fuzix has Makefile but this is a derived file and should
  probably not be committed.. then remove from .gitignore
* BUG LWASM binary output does not pad from ORG to ORG.. affects boot.s - this is kinda documented
* BUG LWASM binary output does not pad as a result of .ds directives.. affects boot.s - this is not documented
* BUG the pcw8256 tree has some checked-in ~ files.
* BUG exec09 doesn't detect when an out-of-range memory address in a region
  is accessed.. or when an out-of-range memory page is mapped.
* BUG exec09 reported this: 01:0x299F 1026FF7B              LBNE  01:0x1291E -- address out of range!!
* add more stuff from util - including FORTH
* work out where advent.db ought to be.
* Get 2nd PCB working
* Upgrade to have FUZIX in CamelForth ROM


*************************
BUGS
*************************

* Things work better if you compile the userspace utilities (esp. "init")
with standard gcc optimizations.


